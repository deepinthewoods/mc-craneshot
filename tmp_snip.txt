
        int currentType = currentTypes.get(slotIndex);
        int newType;
        if (forward) {
            newType = wrap ? (currentType + 1) % slotMovements.size() : Math.min(currentType + 1, slotMovements.size() - 1);
        } else {
            newType = wrap ? (currentType - 1 + slotMovements.size()) % slotMovements.size() : Math.max(currentType - 1, 0);
        }
        currentTypes.set(slotIndex, newType);
    }

    public boolean hasActiveMovement() {
        return activeMovement != null;
    }

    public AbstractMovementSettings.SCROLL_WHEEL getActiveMouseWheelMode() {
        if (activeMovement != null && activeMovement instanceof AbstractMovementSettings) {
            return ((AbstractMovementSettings) activeMovement).mouseWheel;
        }
        return AbstractMovementSettings.SCROLL_WHEEL.NONE;
    }
    
    /**
     * Gets the current camera target, which is used for rendering and projection calculations.
     * @return The current camera target, or null if no active movement.
     */
    public CameraTarget getCurrentTarget() {
        // Only return a target if we have an active movement
        if (activeMovement != null && baseTarget != null) {
            ninja.trek.Craneshot.LOGGER.debug("getCurrentTarget returning baseTarget with orthoFactor={}", baseTarget.getOrthoFactor());
            return baseTarget;
        } else if (baseTarget != null && activeMovement == null) {
            // If we have a baseTarget but no active movement, log this inconsistency and return null
            ninja.trek.Craneshot.LOGGER.warn("Inconsistent state: baseTarget exists but no active movement - returning null");
            // Force clear the stale base target
            baseTarget = null;
            return null;
        } else {
            ninja.trek.Craneshot.LOGGER.debug("getCurrentTarget returning null (no active movement)");
            return null;
        }
    }
    
    /**
     * Checks if orthographic mode should currently be active based on the active movement's settings
     * @return true if orthographic mode should be active, false otherwise
     */
    public boolean isOrthographicMode() {
        // First check if we have an active camera target with orthographic factor
        CameraTarget target = getCurrentTarget();
        if (target != null && target.getOrthoFactor() > 0.5f) {
            return true;
        }
        
        // If no target or ortho factor is low, check active movement settings
        if (activeMovement != null && activeMovement instanceof AbstractMovementSettings) {
            AbstractMovementSettings settings = (AbstractMovementSettings) activeMovement;
            return settings.getProjection() == AbstractMovementSettings.PROJECTION.ORTHO;
        }
        
        // Default to perspective mode if no active target or movement
        return false;
    }
    
    /**
     * Gets the current orthographic scale factor based on active movement settings
     * @return The ortho scale value, or a default value if no active settings
     */
    public float getOrthoScale() {
        // Check if we have active movement settings
        if (activeMovement != null && activeMovement instanceof AbstractMovementSettings) {
            return ((AbstractMovementSettings) activeMovement).getOrthoScale();
        }
        
        // Default scale if no active movement
        return 20.0f;
    }
}
