        ((CameraAccessor) camera).invokesetPos(freeCamPosition);
    }

    public void updateCamera(MinecraftClient client, Camera camera, float delta) {
        updateControlStick(client);

        // Get the base camera state from movement manager - always update to track state
        CameraTarget baseTarget = CraneshotClient.MOVEMENT_MANAGER.update(client, camera);
        // Blend camera nodes influence unless in node edit mode
        baseTarget = ninja.trek.nodes.NodeManager.get().applyInfluence(baseTarget, ninja.trek.nodes.NodeManager.get().isEditing());

        // Check if we have an active camera system
        CameraSystem cameraSystem = CameraSystem.getInstance();
        boolean cameraSystemActive = cameraSystem.isCameraActive();

        if (baseTarget != null) {
            // Update FOV in game renderer
            if (client.gameRenderer instanceof FovAccessor) {
                float fovMultiplier = (float) baseTarget.getFovMultiplier();
                ((FovAccessor) client.gameRenderer).setFovModifier(fovMultiplier);
                // Only log significant FOV changes to reduce console spam
                if (Math.abs(fovMultiplier - 1.0) > 0.001) {
                    Craneshot.LOGGER.debug("set fov {}", fovMultiplier);
                }
            }
            
            if (cameraSystemActive) {
                // Let the camera system update its state
                if (currentMouseMoveMode == POST_MOVE_MOUSE.ROTATE_CAMERA && client.mouse instanceof IMouseMixin) {
                    IMouseMixin mouseMixin = (IMouseMixin) client.mouse;
                    double deltaX = mouseMixin.getCapturedDeltaX();
                    double deltaY = -mouseMixin.getCapturedDeltaY();
                    
                    if (deltaX != 0 || deltaY != 0) {
                        double mouseSensitivity = client.options.getMouseSensitivity().getValue();
                        double calculatedSensitivity = 0.6 * mouseSensitivity * mouseSensitivity * mouseSensitivity + 0.2;
                        cameraSystem.updateRotation(
                            deltaX * calculatedSensitivity * 0.55D,
                            deltaY * calculatedSensitivity * 0.55D,
                            1.0
                        );
                    }
