        this.setYaw(yaw);
        this.setPitch(pitch);
        this.headYaw = yaw;
    }

    public void updateCameraRotations(float yawChange, float pitchChange) {
        float yaw = this.getYaw() + yawChange * 0.15F;
        float pitch = MathHelper.clamp(this.getPitch() + pitchChange * 0.15F, -90F, 90F);

        this.setYaw(yaw);
        this.setPitch(pitch);

        this.setCameraRotations(yaw, pitch);
    }

    private static CameraEntity createCameraEntity(MinecraftClient mc) {
        ClientPlayerEntity player = mc.player;

        if (player == null) {
            throw new RuntimeException("Cannot create CameraEntity from null player!");
        }

        Vec3d entityPos = new Vec3d(player.getX(), player.getY(), player.getZ());
        float yaw = player.getYaw();
        float pitch = player.getPitch();

        mc.player.setVelocity(Vec3d.ZERO);

        CameraEntity camera = new CameraEntity(
            mc, 
            mc.world, 
            player.networkHandler, 
            player.getStatHandler(), 
            player.getRecipeBook()
        );
        camera.noClip = true;

        camera.setPos(entityPos.getX(), entityPos.getY() + 0.125f, entityPos.getZ());
        camera.setYaw(yaw);
        camera.setPitch(pitch);
        camera.setVelocity(Vec3d.ZERO);

        return camera;
    }

    @Nullable
    public static CameraEntity getCamera() {
        return camera;
    }

    public static void setCameraState(boolean enabled) {
        MinecraftClient mc = MinecraftClient.getInstance();

        if (mc.world != null && mc.player != null) {
            if (enabled) {
                createAndSetCamera(mc);
            } else {
                removeCamera(mc);
            }

            // Hand rendering toggle API changed; rely on camera entity + perspective instead.
        }
    }

    public static boolean originalCameraWasPlayer() {
        return originalCameraWasPlayer;
    }

    private static void createAndSetCamera(MinecraftClient mc) {
        camera = createCameraEntity(mc);
        originalCameraEntity = mc.getCameraEntity();
        originalCameraWasPlayer = originalCameraEntity == mc.player;
        cullChunksOriginal = mc.chunkCullingEnabled;

        mc.setCameraEntity(camera);
        mc.chunkCullingEnabled = false; // Disable chunk culling
    }

    private static void removeCamera(MinecraftClient mc) {
        if (mc.world != null && camera != null) {
            // Re-fetch the player entity, in case the player died while in Free Camera mode
            mc.setCameraEntity(originalCameraWasPlayer ? mc.player : originalCameraEntity);
            mc.chunkCullingEnabled = cullChunksOriginal;

            final int chunkX = MathHelper.floor(camera.getX() / 16.0) >> 4;
            final int chunkZ = MathHelper.floor(camera.getZ() / 16.0) >> 4;
            CameraUtils.markChunksForRebuildOnDeactivation(chunkX, chunkZ);
        }

        originalCameraEntity = null;
        camera = null;
    }
}

